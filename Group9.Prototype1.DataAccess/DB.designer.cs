#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Group9.Prototype1.DataAccess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="NET-Prototype1")]
	public partial class DBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertCoursePart(CoursePart instance);
    partial void UpdateCoursePart(CoursePart instance);
    partial void DeleteCoursePart(CoursePart instance);
    partial void InsertCourseRun(CourseRun instance);
    partial void UpdateCourseRun(CourseRun instance);
    partial void DeleteCourseRun(CourseRun instance);
    partial void InsertParticipant(Participant instance);
    partial void UpdateParticipant(Participant instance);
    partial void DeleteParticipant(Participant instance);
    partial void InsertPartiPart(PartiPart instance);
    partial void UpdatePartiPart(PartiPart instance);
    partial void DeletePartiPart(PartiPart instance);
    partial void InsertPerson(Person instance);
    partial void UpdatePerson(Person instance);
    partial void DeletePerson(Person instance);
    #endregion
		
		public DBDataContext() : 
				base(global::Group9.Prototype1.DataAccess.Properties.Settings.Default.NET_Prototype1ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Course> Courses
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<CoursePart> CourseParts
		{
			get
			{
				return this.GetTable<CoursePart>();
			}
		}
		
		public System.Data.Linq.Table<CourseRun> CourseRuns
		{
			get
			{
				return this.GetTable<CourseRun>();
			}
		}
		
		public System.Data.Linq.Table<Participant> Participants
		{
			get
			{
				return this.GetTable<Participant>();
			}
		}
		
		public System.Data.Linq.Table<PartiPart> PartiParts
		{
			get
			{
				return this.GetTable<PartiPart>();
			}
		}
		
		public System.Data.Linq.Table<Person> Persons
		{
			get
			{
				return this.GetTable<Person>();
			}
		}
	}
	
	[Table(Name="dbo.Course")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _code;
		
		private string _name;
		
		private string _description;
		
		private double _credits;
		
		private EntitySet<CourseRun> _CourseRuns;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OncreditsChanging(double value);
    partial void OncreditsChanged();
    #endregion
		
		public Course()
		{
			this._CourseRuns = new EntitySet<CourseRun>(new Action<CourseRun>(this.attach_CourseRuns), new Action<CourseRun>(this.detach_CourseRuns));
			OnCreated();
		}
		
		[Column(Storage="_code", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Storage="_description", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_credits", DbType="Float NOT NULL")]
		public double credits
		{
			get
			{
				return this._credits;
			}
			set
			{
				if ((this._credits != value))
				{
					this.OncreditsChanging(value);
					this.SendPropertyChanging();
					this._credits = value;
					this.SendPropertyChanged("credits");
					this.OncreditsChanged();
				}
			}
		}
		
		[Association(Name="Course_CourseRun", Storage="_CourseRuns", ThisKey="code", OtherKey="code")]
		public EntitySet<CourseRun> CourseRuns
		{
			get
			{
				return this._CourseRuns;
			}
			set
			{
				this._CourseRuns.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CourseRuns(CourseRun entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_CourseRuns(CourseRun entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
	}
	
	[Table(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _code;
		
		private string _description;
		
		private EntitySet<Person> _Persons;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public Role()
		{
			this._Persons = new EntitySet<Person>(new Action<Person>(this.attach_Persons), new Action<Person>(this.detach_Persons));
			OnCreated();
		}
		
		[Column(Storage="_code", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[Column(Storage="_description", DbType="VarChar(MAX)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[Association(Name="Role_Person", Storage="_Persons", ThisKey="code", OtherKey="role")]
		public EntitySet<Person> Persons
		{
			get
			{
				return this._Persons;
			}
			set
			{
				this._Persons.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.Role1 = this;
		}
		
		private void detach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.Role1 = null;
		}
	}
	
	[Table(Name="dbo.CoursePart")]
	public partial class CoursePart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _code;
		
		private string _part;
		
		private string _runid;
		
		private string _description;
		
		private int _maxScore;
		
		private EntityRef<CourseRun> _CourseRun;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    partial void OnpartChanging(string value);
    partial void OnpartChanged();
    partial void OnrunidChanging(string value);
    partial void OnrunidChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnmaxScoreChanging(int value);
    partial void OnmaxScoreChanged();
    #endregion
		
		public CoursePart()
		{
			this._CourseRun = default(EntityRef<CourseRun>);
			OnCreated();
		}
		
		[Column(Storage="_code", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					if (this._CourseRun.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[Column(Storage="_part", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string part
		{
			get
			{
				return this._part;
			}
			set
			{
				if ((this._part != value))
				{
					this.OnpartChanging(value);
					this.SendPropertyChanging();
					this._part = value;
					this.SendPropertyChanged("part");
					this.OnpartChanged();
				}
			}
		}
		
		[Column(Storage="_runid", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string runid
		{
			get
			{
				return this._runid;
			}
			set
			{
				if ((this._runid != value))
				{
					if (this._CourseRun.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnrunidChanging(value);
					this.SendPropertyChanging();
					this._runid = value;
					this.SendPropertyChanged("runid");
					this.OnrunidChanged();
				}
			}
		}
		
		[Column(Storage="_description", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_maxScore", DbType="Int NOT NULL")]
		public int maxScore
		{
			get
			{
				return this._maxScore;
			}
			set
			{
				if ((this._maxScore != value))
				{
					this.OnmaxScoreChanging(value);
					this.SendPropertyChanging();
					this._maxScore = value;
					this.SendPropertyChanged("maxScore");
					this.OnmaxScoreChanged();
				}
			}
		}
		
		[Association(Name="CourseRun_CoursePart", Storage="_CourseRun", ThisKey="runid,code", OtherKey="runid,code", IsForeignKey=true)]
		public CourseRun CourseRun
		{
			get
			{
				return this._CourseRun.Entity;
			}
			set
			{
				CourseRun previousValue = this._CourseRun.Entity;
				if (((previousValue != value) 
							|| (this._CourseRun.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseRun.Entity = null;
						previousValue.CourseParts.Remove(this);
					}
					this._CourseRun.Entity = value;
					if ((value != null))
					{
						value.CourseParts.Add(this);
						this._runid = value.runid;
						this._code = value.code;
					}
					else
					{
						this._runid = default(string);
						this._code = default(string);
					}
					this.SendPropertyChanged("CourseRun");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.CourseRun")]
	public partial class CourseRun : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _runid;
		
		private string _code;
		
		private System.DateTime _startDate;
		
		private string _description;
		
		private string _gradeFormula;
		
		private EntitySet<CoursePart> _CourseParts;
		
		private EntitySet<Participant> _Participants;
		
		private EntityRef<Course> _Course;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnrunidChanging(string value);
    partial void OnrunidChanged();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    partial void OnstartDateChanging(System.DateTime value);
    partial void OnstartDateChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OngradeFormulaChanging(string value);
    partial void OngradeFormulaChanged();
    #endregion
		
		public CourseRun()
		{
			this._CourseParts = new EntitySet<CoursePart>(new Action<CoursePart>(this.attach_CourseParts), new Action<CoursePart>(this.detach_CourseParts));
			this._Participants = new EntitySet<Participant>(new Action<Participant>(this.attach_Participants), new Action<Participant>(this.detach_Participants));
			this._Course = default(EntityRef<Course>);
			OnCreated();
		}
		
		[Column(Storage="_runid", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string runid
		{
			get
			{
				return this._runid;
			}
			set
			{
				if ((this._runid != value))
				{
					this.OnrunidChanging(value);
					this.SendPropertyChanging();
					this._runid = value;
					this.SendPropertyChanged("runid");
					this.OnrunidChanged();
				}
			}
		}
		
		[Column(Storage="_code", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[Column(Storage="_startDate", DbType="DateTime NOT NULL")]
		public System.DateTime startDate
		{
			get
			{
				return this._startDate;
			}
			set
			{
				if ((this._startDate != value))
				{
					this.OnstartDateChanging(value);
					this.SendPropertyChanging();
					this._startDate = value;
					this.SendPropertyChanged("startDate");
					this.OnstartDateChanged();
				}
			}
		}
		
		[Column(Storage="_description", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_gradeFormula", DbType="VarChar(50)")]
		public string gradeFormula
		{
			get
			{
				return this._gradeFormula;
			}
			set
			{
				if ((this._gradeFormula != value))
				{
					this.OngradeFormulaChanging(value);
					this.SendPropertyChanging();
					this._gradeFormula = value;
					this.SendPropertyChanged("gradeFormula");
					this.OngradeFormulaChanged();
				}
			}
		}
		
		[Association(Name="CourseRun_CoursePart", Storage="_CourseParts", ThisKey="runid,code", OtherKey="runid,code")]
		public EntitySet<CoursePart> CourseParts
		{
			get
			{
				return this._CourseParts;
			}
			set
			{
				this._CourseParts.Assign(value);
			}
		}
		
		[Association(Name="CourseRun_Participant", Storage="_Participants", ThisKey="runid,code", OtherKey="runid,code")]
		public EntitySet<Participant> Participants
		{
			get
			{
				return this._Participants;
			}
			set
			{
				this._Participants.Assign(value);
			}
		}
		
		[Association(Name="Course_CourseRun", Storage="_Course", ThisKey="code", OtherKey="code", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.CourseRuns.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.CourseRuns.Add(this);
						this._code = value.code;
					}
					else
					{
						this._code = default(string);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CourseParts(CoursePart entity)
		{
			this.SendPropertyChanging();
			entity.CourseRun = this;
		}
		
		private void detach_CourseParts(CoursePart entity)
		{
			this.SendPropertyChanging();
			entity.CourseRun = null;
		}
		
		private void attach_Participants(Participant entity)
		{
			this.SendPropertyChanging();
			entity.CourseRun = this;
		}
		
		private void detach_Participants(Participant entity)
		{
			this.SendPropertyChanging();
			entity.CourseRun = null;
		}
	}
	
	[Table(Name="dbo.Participant")]
	public partial class Participant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _pnr;
		
		private string _roll;
		
		private string _runid;
		
		private string _code;
		
		private EntitySet<PartiPart> _PartiParts;
		
		private EntityRef<CourseRun> _CourseRun;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpnrChanging(string value);
    partial void OnpnrChanged();
    partial void OnrollChanging(string value);
    partial void OnrollChanged();
    partial void OnrunidChanging(string value);
    partial void OnrunidChanged();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    #endregion
		
		public Participant()
		{
			this._PartiParts = new EntitySet<PartiPart>(new Action<PartiPart>(this.attach_PartiParts), new Action<PartiPart>(this.detach_PartiParts));
			this._CourseRun = default(EntityRef<CourseRun>);
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[Column(Storage="_pnr", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string pnr
		{
			get
			{
				return this._pnr;
			}
			set
			{
				if ((this._pnr != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpnrChanging(value);
					this.SendPropertyChanging();
					this._pnr = value;
					this.SendPropertyChanged("pnr");
					this.OnpnrChanged();
				}
			}
		}
		
		[Column(Storage="_roll", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string roll
		{
			get
			{
				return this._roll;
			}
			set
			{
				if ((this._roll != value))
				{
					this.OnrollChanging(value);
					this.SendPropertyChanging();
					this._roll = value;
					this.SendPropertyChanged("roll");
					this.OnrollChanged();
				}
			}
		}
		
		[Column(Storage="_runid", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string runid
		{
			get
			{
				return this._runid;
			}
			set
			{
				if ((this._runid != value))
				{
					if (this._CourseRun.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnrunidChanging(value);
					this.SendPropertyChanging();
					this._runid = value;
					this.SendPropertyChanged("runid");
					this.OnrunidChanged();
				}
			}
		}
		
		[Column(Storage="_code", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					if (this._CourseRun.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[Association(Name="Participant_PartiPart", Storage="_PartiParts", ThisKey="pnr,runid,code", OtherKey="pnr,runid,code")]
		public EntitySet<PartiPart> PartiParts
		{
			get
			{
				return this._PartiParts;
			}
			set
			{
				this._PartiParts.Assign(value);
			}
		}
		
		[Association(Name="CourseRun_Participant", Storage="_CourseRun", ThisKey="runid,code", OtherKey="runid,code", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CourseRun CourseRun
		{
			get
			{
				return this._CourseRun.Entity;
			}
			set
			{
				CourseRun previousValue = this._CourseRun.Entity;
				if (((previousValue != value) 
							|| (this._CourseRun.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseRun.Entity = null;
						previousValue.Participants.Remove(this);
					}
					this._CourseRun.Entity = value;
					if ((value != null))
					{
						value.Participants.Add(this);
						this._runid = value.runid;
						this._code = value.code;
					}
					else
					{
						this._runid = default(string);
						this._code = default(string);
					}
					this.SendPropertyChanged("CourseRun");
				}
			}
		}
		
		[Association(Name="Person_Participant", Storage="_Person", ThisKey="pnr", OtherKey="pnr", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Participants.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Participants.Add(this);
						this._pnr = value.pnr;
					}
					else
					{
						this._pnr = default(string);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PartiParts(PartiPart entity)
		{
			this.SendPropertyChanging();
			entity.Participant = this;
		}
		
		private void detach_PartiParts(PartiPart entity)
		{
			this.SendPropertyChanging();
			entity.Participant = null;
		}
	}
	
	[Table(Name="dbo.PartiPart")]
	public partial class PartiPart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _pnr;
		
		private string _runid;
		
		private string _code;
		
		private string _part;
		
		private System.DateTime _date;
		
		private double _result;
		
		private string _signature;
		
		private EntityRef<Participant> _Participant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpnrChanging(string value);
    partial void OnpnrChanged();
    partial void OnrunidChanging(string value);
    partial void OnrunidChanged();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    partial void OnpartChanging(string value);
    partial void OnpartChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    partial void OnresultChanging(double value);
    partial void OnresultChanged();
    partial void OnsignatureChanging(string value);
    partial void OnsignatureChanged();
    #endregion
		
		public PartiPart()
		{
			this._Participant = default(EntityRef<Participant>);
			OnCreated();
		}
		
		[Column(Storage="_pnr", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string pnr
		{
			get
			{
				return this._pnr;
			}
			set
			{
				if ((this._pnr != value))
				{
					if (this._Participant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpnrChanging(value);
					this.SendPropertyChanging();
					this._pnr = value;
					this.SendPropertyChanged("pnr");
					this.OnpnrChanged();
				}
			}
		}
		
		[Column(Storage="_runid", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string runid
		{
			get
			{
				return this._runid;
			}
			set
			{
				if ((this._runid != value))
				{
					if (this._Participant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnrunidChanging(value);
					this.SendPropertyChanging();
					this._runid = value;
					this.SendPropertyChanged("runid");
					this.OnrunidChanged();
				}
			}
		}
		
		[Column(Storage="_code", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					if (this._Participant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[Column(Storage="_part", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string part
		{
			get
			{
				return this._part;
			}
			set
			{
				if ((this._part != value))
				{
					this.OnpartChanging(value);
					this.SendPropertyChanging();
					this._part = value;
					this.SendPropertyChanged("part");
					this.OnpartChanged();
				}
			}
		}
		
		[Column(Storage="_date", DbType="DateTime NOT NULL")]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[Column(Storage="_result", DbType="Float NOT NULL")]
		public double result
		{
			get
			{
				return this._result;
			}
			set
			{
				if ((this._result != value))
				{
					this.OnresultChanging(value);
					this.SendPropertyChanging();
					this._result = value;
					this.SendPropertyChanged("result");
					this.OnresultChanged();
				}
			}
		}
		
		[Column(Storage="_signature", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string signature
		{
			get
			{
				return this._signature;
			}
			set
			{
				if ((this._signature != value))
				{
					this.OnsignatureChanging(value);
					this.SendPropertyChanging();
					this._signature = value;
					this.SendPropertyChanged("signature");
					this.OnsignatureChanged();
				}
			}
		}
		
		[Association(Name="Participant_PartiPart", Storage="_Participant", ThisKey="pnr,runid,code", OtherKey="pnr,runid,code", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Participant Participant
		{
			get
			{
				return this._Participant.Entity;
			}
			set
			{
				Participant previousValue = this._Participant.Entity;
				if (((previousValue != value) 
							|| (this._Participant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Participant.Entity = null;
						previousValue.PartiParts.Remove(this);
					}
					this._Participant.Entity = value;
					if ((value != null))
					{
						value.PartiParts.Add(this);
						this._pnr = value.pnr;
						this._runid = value.runid;
						this._code = value.code;
					}
					else
					{
						this._pnr = default(string);
						this._runid = default(string);
						this._code = default(string);
					}
					this.SendPropertyChanged("Participant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Person")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _pnr;
		
		private string _fName;
		
		private string _eName;
		
		private string _email;
		
		private string _role;
		
		private EntitySet<Participant> _Participants;
		
		private EntityRef<Role> _Role1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpnrChanging(string value);
    partial void OnpnrChanged();
    partial void OnfNameChanging(string value);
    partial void OnfNameChanged();
    partial void OneNameChanging(string value);
    partial void OneNameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnroleChanging(string value);
    partial void OnroleChanged();
    #endregion
		
		public Person()
		{
			this._Participants = new EntitySet<Participant>(new Action<Participant>(this.attach_Participants), new Action<Participant>(this.detach_Participants));
			this._Role1 = default(EntityRef<Role>);
			OnCreated();
		}
		
		[Column(Storage="_pnr", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string pnr
		{
			get
			{
				return this._pnr;
			}
			set
			{
				if ((this._pnr != value))
				{
					this.OnpnrChanging(value);
					this.SendPropertyChanging();
					this._pnr = value;
					this.SendPropertyChanged("pnr");
					this.OnpnrChanged();
				}
			}
		}
		
		[Column(Storage="_fName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string fName
		{
			get
			{
				return this._fName;
			}
			set
			{
				if ((this._fName != value))
				{
					this.OnfNameChanging(value);
					this.SendPropertyChanging();
					this._fName = value;
					this.SendPropertyChanged("fName");
					this.OnfNameChanged();
				}
			}
		}
		
		[Column(Storage="_eName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string eName
		{
			get
			{
				return this._eName;
			}
			set
			{
				if ((this._eName != value))
				{
					this.OneNameChanging(value);
					this.SendPropertyChanging();
					this._eName = value;
					this.SendPropertyChanged("eName");
					this.OneNameChanged();
				}
			}
		}
		
		[Column(Storage="_email", DbType="VarChar(30)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[Column(Storage="_role", DbType="VarChar(30)")]
		public string role
		{
			get
			{
				return this._role;
			}
			set
			{
				if ((this._role != value))
				{
					if (this._Role1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnroleChanging(value);
					this.SendPropertyChanging();
					this._role = value;
					this.SendPropertyChanged("role");
					this.OnroleChanged();
				}
			}
		}
		
		[Association(Name="Person_Participant", Storage="_Participants", ThisKey="pnr", OtherKey="pnr")]
		public EntitySet<Participant> Participants
		{
			get
			{
				return this._Participants;
			}
			set
			{
				this._Participants.Assign(value);
			}
		}
		
		[Association(Name="Role_Person", Storage="_Role1", ThisKey="role", OtherKey="code", IsForeignKey=true)]
		public Role Role1
		{
			get
			{
				return this._Role1.Entity;
			}
			set
			{
				Role previousValue = this._Role1.Entity;
				if (((previousValue != value) 
							|| (this._Role1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role1.Entity = null;
						previousValue.Persons.Remove(this);
					}
					this._Role1.Entity = value;
					if ((value != null))
					{
						value.Persons.Add(this);
						this._role = value.code;
					}
					else
					{
						this._role = default(string);
					}
					this.SendPropertyChanged("Role1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Participants(Participant entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_Participants(Participant entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
	}
}
#pragma warning restore 1591
